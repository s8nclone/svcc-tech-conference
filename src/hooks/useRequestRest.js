import { useState, useEffect } from 'react'
import axios from 'axios';

export const REQUEST_STATUS = {
    LOADING: "loading",
    SUCCESS: "success",
    FAILURE: "failed"
};

const restUrl = "api/speakers";

function useRequestRest() {
    const [data, setData ] = useState([]);
    const [requestStatus, setRequestStatus] = useState(REQUEST_STATUS.LOADING)
    const [error, setError] = useState("");

    const delay = (ms) => new Promise((res) => setTimeout(res, ms));

    useEffect(()=> {
        async function delayFunc() {
            try {
                //get rest url
                const result = await axios.get(restUrl);
                // throw "Bad Error";
                setRequestStatus(REQUEST_STATUS.SUCCESS);
                setData(result.data); //set data to data from url
            } catch (e) {
                setRequestStatus(REQUEST_STATUS.FAILURE)
                setError(e);
            }
        }
        delayFunc();
    }, []);

    function updateRecord(record, doneCallback) {
        const originalRecords = [...data];
        const newRecords = data.map((rec)=> {
            return rec.id === record.id ? record : rec;
        });

        async function delayFunction() {
            try {
                setData(newRecords);
                //append record id to rest url and pass record to update as second params
                await axios.put(`${restUrl}/${record.id}`, record);
                if (doneCallback) {
                    doneCallback();
                }
            } catch (err) {
                // console.log(`useRequestDelay error ${err}`);
                console.log("error thrown from inside delayFunction", error);
                if (doneCallback) {
                    doneCallback();
                }
                setData(originalRecords);
            }
        }
        delayFunction();
    }

    function insertRecord(record, doneCallback) {
        const originalRecords = [...data];
        const newRecords = [record, ...data];

        async function delayFunction() {
            try {
                setData(newRecords);
                //append placeholder to rest url since it will be generated by the server and return it 
                //and pass record to insert as second params
                await axios.post(`${restUrl}/99999`, record);
                if (doneCallback) {
                    doneCallback();
                }
            } catch (err) {
                // console.log(`useRequestDelay error ${err}`);
                console.log("error thrown from inside delayFunction", error);
                if (doneCallback) {
                    doneCallback();
                }
                setData(originalRecords);
            }
        }
        delayFunction();
    }

    function deleteRecord(record, doneCallback) {
        const originalRecords = [...data];
        const newRecords = data.filter((rec)=> {
            return rec.id != record.id;
        });

        async function delayFunction() {
            try {
                setData(newRecords);
                //append record id to rest url and pass record to delete as second params
                await axios.delete(`${restUrl}/${record.id}`, record);
                if (doneCallback) {
                    doneCallback();
                }
            } catch (err) {
                // console.log(`useRequestDelay error ${err}`);
                console.log("error thrown from inside delayFunction", error);
                if (doneCallback) {
                    doneCallback();
                }
                setData(originalRecords);
            }
        }
        delayFunction();
    }

  return {
    data, requestStatus, error, updateRecord, insertRecord, deleteRecord
  };

}

export default useRequestRest